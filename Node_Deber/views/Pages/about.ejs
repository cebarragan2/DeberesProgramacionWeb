<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>About</title>
    <%- include('../partials/head')-%>
</head>
<body>
    
    <div class="container-fluid py-2 text-center">
        <nav class="navbar navbar-expand-lg navbar-light bg-light">
          <a class="navbar-brand text-success " href="#"><h1><strong>Plantillas Node.js</strong><h1></a>
        </nav>
      </div>

      <div class="container py-4">
        <p> Con EJS (como otras plantillas Express), puede ejecutar el código del servidor y acceder a las variables de su servidor desde su HTML.
            En EJS se hace usando &lt&#137 " como etiqueta de inicio y " &#137&gt " como etiqueta final, las variables pasadas como parámetros de render pueden accederse usando &lt&#137=var_name&#137&gt
            Por ejemplo, si tiene una matriz de suministros en su código de servidor
            puedes recorrerlo usando</p>

            <pre class="bg-light"><code>const express = require('express');  //Imports the express module
                const app = express();  //Creates an instance of the express module
                
                const PORT = 3000; //Randomly chosen port
                
                app.set('view engine','jade'); //Sets jade as the View Engine / Template Engine
                app.set('views','src/views'); //Sets the directory where all the views (.jade files) are stored.
                
                //Creates a Root Route
                app.get('/',function(req, res){
                    res.render('index');  //renders the index.jade file into html and returns as a response. The render function optionally takes the data to pass to the view.
                });
                
                //Starts the Express server with a callback
                app.listen(PORT, function(err) {
                    if (!err) {
                        console.log('Server is running at port', PORT);
                    } else {
                        console.log(JSON.stringify(err));
                    }
                });
                </code></pre>

                <p> Con EJS (como otras plantillas Express), puede ejecutar el código del servidor y acceder a las variables de su servidor desde su HTML. <br> En EJS se hace usando " <code>&lt;%</code> " como etiqueta de inicio y " <code>%&gt;</code> " como etiqueta final, las variables pasadas como parámetros de render pueden accederse usando <code>&lt;%=var_name%&gt;</code> <br> Por ejemplo, si tiene una matriz de suministros en su código de servidor <br> puedes recorrerlo usando </p>
                <pre class="bg-light"><code>
                    &lt;h1&gt;&lt;%= title %&gt;&lt;/h1&gt;
                    &lt;ul&gt;
                 &lt;% for(var i=0; i&lt;supplies.length; i++) { %&gt;
                     &lt;li&gt;
                         &lt;a href='supplies/&lt;%= supplies[i] %&gt;'&gt;
                             &lt;%= supplies[i] %&gt;
                         &lt;/a&gt;
                     &lt;/li&gt;
                 &lt;% } %&gt;
                 </code></pre>

                 <p> Como puede ver en el ejemplo, cada vez que cambia entre el código del lado del servidor y el HTML, debe cerrar la etiqueta EJS actual y abrir una nueva más adelante. Aquí queríamos crear <code>li</code> dentro del comando <code>for</code> así que necesitamos cerrar nuestra etiqueta EJS. al final del <code>for</code> y crear una nueva etiqueta solo para los corchetes <br> otro ejemplo <br> Si queremos que la versión predeterminada de entrada sea una variable del lado del servidor, usamos <code>&lt;%=</code> <br> por ejemplo: </p>

                 <pre class="bg-light"><code> 
                     Message:&lt;br&gt;
                    &lt;input type="text" value="&lt;%= message %&gt;" name="message" required&gt;
                    </code></pre>

                    <p> Aquí, la variable de mensaje que se pasa desde el lado del servidor será el valor predeterminado de su entrada, tenga en cuenta que si no pasó la variable de mensaje desde el lado del servidor, EJS generará una excepción. Puede pasar parámetros usando <code>res.render('index', {message: message});</code> (para el archivo ejs llamado index.ejs). <br><br> En las etiquetas EJS también puede usar <code>if</code> , <code>while</code> o cualquier otro comando javascript que desee. </p>
      </div>
    
    <footer>
        <%- include('../partials/footer')-%>
    </footer>
</body>
</html>